package main

import (
	"fmt"
	"html/template"
	"log"
	"os"
	"strings"
	"time"

	"github.com/go-openapi/strfmt"
	"github.com/sethvargo/go-password/password"
	"github.com/spectrocloud/palette-sdk-go/api/client/version1"
	"github.com/spectrocloud/palette-sdk-go/api/models"
	"github.com/spectrocloud/palette-sdk-go/client"
)

type PageData struct {
	EmailID     string
	Password    string
	APIKey      string
	ProjectName string
	ProjectID   string
	PaletteHost string
	Theme       string
}

func Setup(SuerApiKey string) {

	// create project
	// create user
	// add role to user

	// TODO replace with Instruqt Secrets
	SANDBOX_ID := os.Getenv("INSTRUQT_PARTICIPANT_ID")
	host := os.Getenv("PALETTE_HOST")
	projectUid := os.Getenv("PALETTE_PROJECT_UID")

	projectUid = ""

	scope := "tenant"

	if host == "" || SuerApiKey == "" {
		fmt.Println("You must specify the PALETTE_HOST and PALETTE_API_KEY environment variables.")
		os.Exit(1)
	}
	if projectUid != "" {
		scope = "project"
	}

	// Initialize a Palette client

	pc := client.New(
		client.WithPaletteURI(host),
		client.WithAPIKey(SuerApiKey),
	)
	if projectUid != "" {
		client.WithScopeProject(projectUid)(pc)
	} else {
		client.WithScopeTenant()(pc)
	}

	fmt.Printf(scope)

	// Create Project and User Entities

	projectEntity := models.V1ProjectEntity{
		Metadata: &models.V1ObjectMeta{
			Name: fmt.Sprintf("instruqt-%s", SANDBOX_ID),
		},
	}

	userEntity := models.V1UserEntity{
		Spec: &models.V1UserSpecEntity{
			EmailID:   fmt.Sprintf("instruqt+%s@spectrocloud.com", SANDBOX_ID),
			FirstName: "Instruqt",
			LastName:  "Lab",
		},
	}

	// Create Project and User Entities
	projectId, err := pc.CreateProject(&projectEntity)
	if err != nil {
		panic(err)
	}

	userId, err := pc.CreateUser(&userEntity)
	if err != nil {
		panic(err)
	}

	// Get Role
	projectAdmin, err := pc.GetRole("Project Admin")
	if err != nil {
		panic(err)
	}

	projectRolePatch := models.V1ProjectRolesPatch{
		Projects: []*models.V1ProjectRolesPatchProjectsItems0{{
			ProjectUID: projectId,
			Roles: []string{
				projectAdmin.Metadata.UID,
			},
		}},
	}

	// Associate Project and User
	if err = pc.AssociateUserProjectRole(userId, &projectRolePatch); err != nil {
		panic(err)
	}

	user, err := pc.GetUserByID(userId)

	token := strings.Split(user.Status.ActivationLink, "/")[5]

	passwordActivateParams := version1.NewV1PasswordActivateParams()
	mySecretPassword, err := password.Generate(16, 4, 4, false, false)

	goodPassword := "L3@rN-" + mySecretPassword

	if err != nil {
		panic(err)
	}

	body := &models.V1APIKeyEntity{
		Metadata: &models.V1ObjectMeta{
			Name:        fmt.Sprintf("instruqt-%s-api-key", SANDBOX_ID),
			Annotations: make(map[string]string),
		},
		Spec: &models.V1APIKeySpecEntity{
			UserUID: userId,
			Expiry:  models.V1Time(time.Now().Add(time.Duration(7 * 24 * time.Hour))),
		},
	}
	body.Metadata.Annotations["description"] = "Autogenerated Instruqt API Key"

	params := version1.NewV1APIKeysCreateParams().WithBody(body)
	resp, err := pc.Client.V1APIKeysCreate(params)
	if err != nil {
		fmt.Println("here")
		panic(err)
	}

	passwordValues := strfmt.Password(goodPassword)

	passwordActivateParams.Body.Password = &passwordValues
	passwordActivateParams.PasswordToken = token
	respPass, err := pc.Client.V1PasswordActivate(passwordActivateParams)

	fmt.Println(respPass)
	if err != nil {
		panic(err)
	}

	os.Setenv("PALETTE_INSTRUQT_EMAILID", user.Spec.EmailID)
	os.Setenv("PALETTE_INSTRUQT_PASSWORD", goodPassword)
	os.Setenv("PALETTE_INSTRUQT_API_KEY", resp.Payload.APIKey)
	os.Setenv("PALETTE_INSTRUQT_PROJECTNAME", projectEntity.Metadata.Name)
	os.Setenv("PALETTE_INSTRUQT_PROJECTID", projectId)

	data := PageData{}
	data.EmailID = os.Getenv("PALETTE_INSTRUQT_EMAILID")
	data.Password = os.Getenv("PALETTE_INSTRUQT_PASSWORD")
	data.APIKey = os.Getenv("PALETTE_INSTRUQT_API_KEY")
	data.ProjectName = os.Getenv("PALETTE_INSTRUQT_PROJECTNAME")
	data.ProjectID = os.Getenv("PALETTE_INSTRUQT_PROJECTID")
	data.Theme = os.Getenv("INSTRUQT_THEME")
	data.PaletteHost = os.Getenv("PALETTE_HOST")

	file, err := os.Create("index.html")
	if err != nil {
		panic(err)
	}

	tmpl, err := template.ParseFiles("index.tmpl.html")
	if err != nil {
		log.Fatalf("Error parsing template file: %v", err)
	}

	log.Println("Executing template...")
	err = tmpl.Execute(file, data)

	if err != nil {
		log.Fatalf("Error executing template: %v", err)
	}

}
